// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model Example {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Role {
  PUBLIC
  DROPSHIPER
  SUPPLIER
  INSTRUCTOR
  ADMIN
  SUPERADMIN
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  emailVerified DateTime?
  image         String?
  role          Role?         @default(PUBLIC)
  accounts      Account[]
  sessions      Session[]
  contacts      Contact[]
  orders        Order[]
  products      Product[]
  bankAccounts  BankAccount[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum ContactType {
  CUSTOMER
  DROPSHIPER
  SUPPLIER
  INSTRUCTOR
  ADMIN
}

model Contact {
  id         String      @id @default(cuid())
  type       ContactType
  firstName  String
  lastName   String?
  email      String?
  phone      String
  facebook   String?
  address    String?     @db.Text
  province   String?
  city       String?
  district   String?
  postalCode String?
  userId     String
  user       User        @relation(fields: [userId], references: [id])
}

model Product {
  id          String           @id @default(cuid())
  code        String
  userId      String?
  user        User?            @relation(fields: [userId], references: [id])
  name        String
  description String           @db.Text
  images      String[]
  variants    ProductVariant[]
}

model ProductVariant {
  id            String   @id @default(cuid())
  productId     String
  product       Product  @relation(fields: [productId], references: [id])
  name          String?  @default("default")
  value         String?  @default("default")
  image         String?
  sku           String?
  price         Decimal // Default selling price
  discountPrice Decimal? // Product price after discount
  sellingPrice  Decimal? // Dropshiper can sell this product with this price
  stock         Decimal? @default(0)
  weight        Decimal
}

enum OrderStatus {
  AWAITING_PAYMENT // Waiting for payment
  AWAITING_CONFIRMATION // Waiting suppier confirmation
  PROCESSING // Process by supplier
  SHIPPED // On shiping
  DELIVERED // Delivered to customer
  COMPLETED // Confirmed by dropshiper
  COMPLAINT // Complain by dropshiper
  RETURN // Order returned
  CANCEL // Order canceled
}

model Order {
  id       String      @id @default(cuid())
  code     String
  date     DateTime
  userId   String
  user     User        @relation(fields: [userId], references: [id])
  amount   Decimal
  discount Decimal?
  status   OrderStatus
  items    OrderItem[]
}

model OrderItem {
  id          String   @id @default(cuid())
  orderId     String
  order       Order    @relation(fields: [orderId], references: [id])
  productId   String
  productName String
  quantity    Decimal? @default(1)
  price       Decimal
}

model BankAccount {
  id            String  @id @default(cuid())
  userId        String?
  user          User?   @relation(fields: [userId], references: [id])
  name          String
  bankName      String
  bankCode      String?
  accountNumber String
}

model Setting {
  key   String @unique
  value String
}
